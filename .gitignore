library(keras)
library(reticulate)
install_keras()
base_dir <- "~/CNN/"
train_dir <- file.path(base_dir, "train")
validation_dir <- file.path(base_dir, "validation")
test_dir <- file.path(base_dir, "test")

# Loading the convolutional base of VGG16

conv_base <- application_vgg16(
	weights = "imagenet",
	include_top = FALSE,
	input_shape = c(150,150,3))

# weights specifies the weight checkpoint from which to initialize the model 
# include_top refers to including (or not) the densely connected classification top of the network 
# input_shape is the shape of the image tensors that you'll feed to the network 

conv_base

model <- keras_model_sequential() %>%
	conv_base %>%
	layer_flatten() %>%
	layer_dense(units = 256, activation = "relu") %>%
	layer_dense(units = 1, activation = "sigmoid") 

model

freeze_weights(conv_base)


# Creating batch data generators with data augmentation 

train_datagen <- image_data_generator(
	rescale = 1/255,
	rotation_range = 40,
	width_shift_range = 0.2,
	height_shift_range = 0.2,
	shear_range = 0.2,
	zoom_range = 0.2, 
	horizontal_flip = TRUE,
	fill_mode = "nearest")



test_datagen <- image_data_generator(rescale = 1/255)

train_generator <- flow_images_from_directory(
	train_dir,
	train_datagen,
	target_size = c(150,150),
	batch_size = 32,
	class_mode = "binary")

validation_generator <- flow_images_from_directory(
	validation_dir,
	test_datagen,
	target_size = c(150,150),
	batch_size = 32,
	class_mode = "binary" )



model %>% compile(
	loss = "binary_crossentropy",
	optimizer = optimizer_rmsprop(lr = 2e-5), 
	metrics = c("acc"))

# training the model 

history3 <- model %>% fit_generator (
	train_generator,
	steps_per_epoch = 100,
	epochs = 30,
	validation_data = validation_generator, 
	validation_steps = 50)

